package jp.co.mra.ecodsl.base;

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 10 21:30:44 JST 2014
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 10 21:30:44 JST 2014
  */
public class EcoModelParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EcoModelParser() {super();}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\004\003\000\002\004\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\006\000\002\007\003\000\002\007\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\010\003\000\002\011\003\000" +
    "\002\012\003\000\002\014\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\015" +
    "\011\000\002\015\006\000\002\016\011\000\002\017\012" +
    "\000\002\020\007\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\016\004\016\040\015\044\014\050\005\051" +
    "\021\053\022\001\002\000\004\015\153\001\002\000\004" +
    "\016\145\001\002\000\004\015\144\001\002\000\004\015" +
    "\143\001\002\000\004\005\141\001\002\000\004\005\136" +
    "\001\002\000\020\002\001\004\016\040\015\044\014\050" +
    "\005\051\021\053\022\001\002\000\004\002\135\001\002" +
    "\000\026\006\037\010\026\012\034\016\077\036\033\037" +
    "\027\040\015\041\023\042\076\043\100\001\002\000\046" +
    "\005\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\045\uffe0\001\002\000" +
    "\004\005\125\001\002\000\004\015\124\001\002\000\030" +
    "\002\ufffd\004\ufffd\015\ufffd\021\ufffd\040\ufffd\044\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\053\ufffd\001\002\000\004" +
    "\020\067\001\002\000\004\041\023\001\002\000\050\005" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\045\uffdd\001\002" +
    "\000\010\005\uffd3\012\025\015\uffd3\001\002\000\022\006" +
    "\037\010\026\012\034\016\031\036\033\037\027\040\015" +
    "\041\023\001\002\000\022\006\037\010\026\012\034\016" +
    "\031\036\033\037\027\040\015\041\023\001\002\000\044" +
    "\011\uffde\013\uffde\014\uffde\015\uffde\017\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\045\uffde\001\002\000\020\011" +
    "\uffff\013\uffff\014\063\022\045\023\044\024\047\025\046" +
    "\001\002\000\022\006\037\010\026\012\034\016\031\036" +
    "\033\037\027\040\015\041\023\001\002\000\044\011\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\017\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\045\ufff5\001\002\000\044\011\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\017\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\045\uffdf\001\002\000\024\006\037\010\026" +
    "\012\034\013\057\016\031\036\033\037\027\040\015\041" +
    "\023\001\002\000\044\011\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\017\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\045\ufff4" +
    "\001\002\000\004\013\055\001\002\000\004\016\042\001" +
    "\002\000\044\011\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\045\ufff6\001\002" +
    "\000\044\011\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\045\ufff7\001\002\000" +
    "\022\006\037\010\026\012\034\016\031\036\033\037\027" +
    "\040\015\041\023\001\002\000\014\017\050\022\045\023" +
    "\044\024\047\025\046\001\002\000\022\006\037\010\026" +
    "\012\034\016\031\036\033\037\027\040\015\041\023\001" +
    "\002\000\022\006\037\010\026\012\034\016\031\036\033" +
    "\037\027\040\015\041\023\001\002\000\022\006\037\010" +
    "\026\012\034\016\031\036\033\037\027\040\015\041\023" +
    "\001\002\000\022\006\037\010\026\012\034\016\031\036" +
    "\033\037\027\040\015\041\023\001\002\000\044\011\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\017\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\045\uffeb\001\002\000\044\011\uffee\013" +
    "\uffee\014\uffee\015\uffee\017\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\045\uffee\001\002\000\044\011\uffed\013\uffed" +
    "\014\uffed\015\uffed\017\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\045\uffed\001\002\000\044\011\uffec\013\uffec\014" +
    "\uffec\015\uffec\017\uffec\022\uffec\023\uffec\024\047\025\046" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\045\uffec\001\002\000\044\011\uffef\013\uffef\014\uffef" +
    "\015\uffef\017\uffef\022\uffef\023\uffef\024\047\025\046\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\045\uffef\001\002\000\006\005\uffd4\015\uffd4\001\002\000" +
    "\004\013\060\001\002\000\044\011\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\017\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\045\ufff1\001\002\000\044\011\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\017\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\045" +
    "\ufff2\001\002\000\014\017\062\022\045\023\044\024\047" +
    "\025\046\001\002\000\044\011\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\045" +
    "\ufff3\001\002\000\022\006\037\010\026\012\034\016\031" +
    "\036\033\037\027\040\015\041\023\001\002\000\006\011" +
    "\ufffe\013\ufffe\001\002\000\004\011\066\001\002\000\044" +
    "\011\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\045\ufff0\001\002\000\016\004" +
    "\016\040\015\044\014\050\005\051\021\053\022\001\002" +
    "\000\020\004\016\021\072\040\015\044\014\050\005\051" +
    "\021\053\022\001\002\000\030\002\ufffc\004\ufffc\015\ufffc" +
    "\021\ufffc\040\ufffc\044\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\053\ufffc\001\002\000\004\050\073\001\002\000\004" +
    "\016\074\001\002\000\026\006\037\010\026\012\034\016" +
    "\077\036\033\037\027\040\015\041\023\042\076\043\100" +
    "\001\002\000\024\022\045\023\044\024\047\025\046\027" +
    "\113\030\114\031\116\032\112\033\115\001\002\000\012" +
    "\017\uffea\034\uffea\035\uffea\045\uffea\001\002\000\026\006" +
    "\037\010\026\012\034\016\077\036\033\037\027\040\015" +
    "\041\023\042\076\043\100\001\002\000\012\017\uffe9\034" +
    "\uffe9\035\uffe9\045\uffe9\001\002\000\010\017\104\034\102" +
    "\035\103\001\002\000\026\006\037\010\026\012\034\016" +
    "\077\036\033\037\027\040\015\041\023\042\076\043\100" +
    "\001\002\000\026\006\037\010\026\012\034\016\077\036" +
    "\033\037\027\040\015\041\023\042\076\043\100\001\002" +
    "\000\004\015\uffd5\001\002\000\012\017\uffe2\034\102\035" +
    "\uffe2\045\uffe2\001\002\000\012\017\uffe3\034\uffe3\035\uffe3" +
    "\045\uffe3\001\002\000\026\017\062\022\045\023\044\024" +
    "\047\025\046\027\113\030\114\031\116\032\112\033\115" +
    "\001\002\000\010\017\111\034\102\035\103\001\002\000" +
    "\012\017\uffe1\034\uffe1\035\uffe1\045\uffe1\001\002\000\022" +
    "\006\037\010\026\012\034\016\031\036\033\037\027\040" +
    "\015\041\023\001\002\000\022\006\037\010\026\012\034" +
    "\016\031\036\033\037\027\040\015\041\023\001\002\000" +
    "\022\006\037\010\026\012\034\016\031\036\033\037\027" +
    "\040\015\041\023\001\002\000\022\006\037\010\026\012" +
    "\034\016\031\036\033\037\027\040\015\041\023\001\002" +
    "\000\022\006\037\010\026\012\034\016\031\036\033\037" +
    "\027\040\015\041\023\001\002\000\022\017\uffe6\022\045" +
    "\023\044\024\047\025\046\034\uffe6\035\uffe6\045\uffe6\001" +
    "\002\000\022\017\uffe4\022\045\023\044\024\047\025\046" +
    "\034\uffe4\035\uffe4\045\uffe4\001\002\000\022\017\uffe7\022" +
    "\045\023\044\024\047\025\046\034\uffe7\035\uffe7\045\uffe7" +
    "\001\002\000\022\017\uffe8\022\045\023\044\024\047\025" +
    "\046\034\uffe8\035\uffe8\045\uffe8\001\002\000\022\017\uffe5" +
    "\022\045\023\044\024\047\025\046\034\uffe5\035\uffe5\045" +
    "\uffe5\001\002\000\030\002\ufff8\004\ufff8\015\ufff8\021\ufff8" +
    "\040\ufff8\044\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053" +
    "\ufff8\001\002\000\022\006\037\010\026\012\034\016\031" +
    "\036\033\037\027\040\015\041\023\001\002\000\014\015" +
    "\uffda\022\045\023\044\024\047\025\046\001\002\000\010" +
    "\034\102\035\103\045\130\001\002\000\016\004\016\040" +
    "\015\044\014\050\005\051\021\053\022\001\002\000\022" +
    "\004\016\015\uffd7\040\015\044\014\046\132\050\005\051" +
    "\021\053\022\001\002\000\016\004\016\040\015\044\014" +
    "\050\005\051\021\053\022\001\002\000\020\004\016\040" +
    "\015\044\014\047\134\050\005\051\021\053\022\001\002" +
    "\000\004\015\uffd8\001\002\000\004\002\000\001\002\000" +
    "\024\006\037\010\026\012\034\016\031\036\033\037\027" +
    "\040\015\041\023\053\022\001\002\000\014\015\uffd9\022" +
    "\045\023\044\024\047\025\046\001\002\000\004\015\uffdc" +
    "\001\002\000\022\006\037\010\026\012\034\016\031\036" +
    "\033\037\027\040\015\041\023\001\002\000\014\015\uffdb" +
    "\022\045\023\044\024\047\025\046\001\002\000\030\002" +
    "\ufffb\004\ufffb\015\ufffb\021\ufffb\040\ufffb\044\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\053\ufffb\001\002\000\030\002" +
    "\ufff9\004\ufff9\015\ufff9\021\ufff9\040\ufff9\044\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\053\ufff9\001\002\000\026\006" +
    "\037\010\026\012\034\016\077\036\033\037\027\040\015" +
    "\041\023\042\076\043\100\001\002\000\010\017\147\034" +
    "\102\035\103\001\002\000\004\020\150\001\002\000\016" +
    "\004\016\040\015\044\014\050\005\051\021\053\022\001" +
    "\002\000\020\004\016\021\152\040\015\044\014\050\005" +
    "\051\021\053\022\001\002\000\004\015\uffd6\001\002\000" +
    "\030\002\ufffa\004\ufffa\015\ufffa\021\ufffa\040\ufffa\044\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\024\002\012\004\011\005\017\010\010\013" +
    "\006\015\003\016\005\017\016\020\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\070" +
    "\010\010\013\006\015\003\016\005\017\016\020\007\001" +
    "\001\000\002\001\001\000\016\006\074\007\126\010\031" +
    "\011\040\012\037\014\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\035\006\027\010\031\011\040" +
    "\012\037\014\034\001\001\000\016\003\064\006\027\010" +
    "\031\011\040\012\037\014\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\060\010\031\011\040\012" +
    "\037\014\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\055\006\027\010\031\011\040\012\037\014" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\042\010\031\011\040\012\037\014\034\001\001\000\002" +
    "\001\001\000\014\006\053\010\031\011\040\012\037\014" +
    "\034\001\001\000\014\006\052\010\031\011\040\012\037" +
    "\014\034\001\001\000\014\006\051\010\031\011\040\012" +
    "\037\014\034\001\001\000\014\006\050\010\031\011\040" +
    "\012\037\014\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\063\006\027\010\031\011\040\012\037\014\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\067\005\017\010\010\013\006\015\003\016" +
    "\005\017\016\020\007\001\001\000\020\005\070\010\010" +
    "\013\006\015\003\016\005\017\016\020\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\074\007\100\010\031\011\040\012\037\014\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\106" +
    "\007\107\010\031\011\040\012\037\014\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\074\007\105" +
    "\010\031\011\040\012\037\014\034\001\001\000\016\006" +
    "\074\007\104\010\031\011\040\012\037\014\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\122\010\031\011\040\012\037\014\034\001\001\000" +
    "\014\006\121\010\031\011\040\012\037\014\034\001\001" +
    "\000\014\006\120\010\031\011\040\012\037\014\034\001" +
    "\001\000\014\006\117\010\031\011\040\012\037\014\034" +
    "\001\001\000\014\006\116\010\031\011\040\012\037\014" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\125\010\031\011\040\012\037\014\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\130\005\017\010\010\013\006\015\003\016\005\017\016" +
    "\020\007\001\001\000\020\005\070\010\010\013\006\015" +
    "\003\016\005\017\016\020\007\001\001\000\022\004\132" +
    "\005\017\010\010\013\006\015\003\016\005\017\016\020" +
    "\007\001\001\000\020\005\070\010\010\013\006\015\003" +
    "\016\005\017\016\020\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\136\010\031\011\040\012\037" +
    "\014\034\020\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\141\010\031\011\040\012\037\014\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\074\007\145\010\031\011\040\012\037" +
    "\014\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\150\005\017\010\010\013\006\015\003\016\005" +
    "\017\016\020\007\001\001\000\020\005\070\010\010\013" +
    "\006\015\003\016\005\017\016\020\007\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EcoModelParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EcoModelParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EcoModelParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EcoModelParser$actions {
  private final EcoModelParser parser;

  /** Constructor */
  CUP$EcoModelParser$actions(EcoModelParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EcoModelParser$do_action(
    int                        CUP$EcoModelParser$act_num,
    java_cup.runtime.lr_parser CUP$EcoModelParser$parser,
    java.util.Stack            CUP$EcoModelParser$stack,
    int                        CUP$EcoModelParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EcoModelParser$result;

      /* select the action based on the action number */
      switch (CUP$EcoModelParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // csv ::= CSV string 
            {
              jp.co.mra.ecodsl.exp.Tcsv RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Tstring file = (jp.co.mra.ecodsl.exp.Tstring)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tcsv(file);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("csv",14, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // csv ::= CSV string LEFTB explist RIGHTB 
            {
              jp.co.mra.ecodsl.exp.Tcsv RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).right;
		jp.co.mra.ecodsl.exp.Tstring file = (jp.co.mra.ecodsl.exp.Tstring)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.exp.Texplist l = (jp.co.mra.ecodsl.exp.Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tcsv(file, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("csv",14, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // postwhile ::= DO LEFTCB opelist RIGHTCB WHILE LPAR boolexp RPAR 
            {
              jp.co.mra.ecodsl.command.Tpostwhile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).right;
		jp.co.mra.ecodsl.command.Topelist l = (jp.co.mra.ecodsl.command.Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.exp.Tboolexp b = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tpostwhile(b, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("postwhile",13, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-7)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // prewhile ::= WHILE LPAR boolexp RPAR LEFTCB opelist RIGHTCB 
            {
              jp.co.mra.ecodsl.command.Tprewhile RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).right;
		jp.co.mra.ecodsl.exp.Tboolexp b = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.command.Topelist l = (jp.co.mra.ecodsl.command.Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tprewhile(b, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("prewhile",12, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-6)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if ::= IF boolexp THEN opelist 
            {
              jp.co.mra.ecodsl.command.Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Tboolexp b = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.command.Topelist t = (jp.co.mra.ecodsl.command.Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tifthenelse(b,t); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if ::= IF boolexp THEN opelist ELSE opelist ENDIF 
            {
              jp.co.mra.ecodsl.command.Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).right;
		jp.co.mra.ecodsl.exp.Tboolexp b = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).right;
		jp.co.mra.ecodsl.command.Topelist t = (jp.co.mra.ecodsl.command.Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.command.Topelist e = (jp.co.mra.ecodsl.command.Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tifthenelse(b,t,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-6)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // let ::= ident LET exp 
            {
              jp.co.mra.ecodsl.command.Tlet RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Tident i = (jp.co.mra.ecodsl.exp.Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp e = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tlet(i,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // let ::= CON LET exp 
            {
              jp.co.mra.ecodsl.command.Tlet RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp e = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tlet(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // let ::= csv LET exp 
            {
              jp.co.mra.ecodsl.command.Tlet RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Tcsv c = (jp.co.mra.ecodsl.exp.Tcsv)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp e = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tlet(c, e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // let ::= ident LET csv 
            {
              jp.co.mra.ecodsl.command.Tlet RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Tident i = (jp.co.mra.ecodsl.exp.Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Tcsv c = (jp.co.mra.ecodsl.exp.Tcsv)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tlet(i, c); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // string ::= STRINGLITERAL 
            {
              jp.co.mra.ecodsl.exp.Tstring RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tstring(s); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("string",10, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // index ::= INDEX 
            {
              jp.co.mra.ecodsl.exp.Tindex RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tindex(z); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("index",8, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= VALUE 
            {
              jp.co.mra.ecodsl.exp.Tvalue RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tvalue(z); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ident ::= ID 
            {
              jp.co.mra.ecodsl.exp.Tident RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tident(n); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ident",6, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolexp ::= LPAR boolexp RPAR 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.exp.Tboolexp e = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolexp ::= boolexp OR boolexp 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Tboolexp l = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Tboolexp r = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(l,'|',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolexp ::= boolexp AND boolexp 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Tboolexp l = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Tboolexp r = (jp.co.mra.ecodsl.exp.Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(l,'&',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolexp ::= exp GEQ exp 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(l,'$',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolexp ::= exp GE exp 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(l,'>',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexp ::= exp LEQ exp 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(l,'!',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexp ::= exp LE exp 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(l,'<',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexp ::= exp EQ exp 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(l,'=',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexp ::= FALSE 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(false); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexp ::= TRUE 
            {
              jp.co.mra.ecodsl.exp.Tboolexp RESULT =null;
		 RESULT = new jp.co.mra.ecodsl.exp.Tboolexp(true); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= SIGMA LPAR exp RPAR 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.exp.Texp e = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Tsigma(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp MINUS exp 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Texpinfix(l,'-',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp DIV exp 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Texpinfix(l,'/',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp TIMES exp 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Texpinfix(l,'*',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp PLUS exp 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp l = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp r = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Texpinfix(l,'+',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= LEFTAR explist RIGHTAR 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.exp.Texplist e = (jp.co.mra.ecodsl.exp.Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.exp.TexpArray(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= LEFTB RIGHTB 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		 RESULT = new jp.co.mra.ecodsl.exp.Texplist(); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= LEFTB explist RIGHTB 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.exp.Texplist e = (jp.co.mra.ecodsl.exp.Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= LPAR exp RPAR 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.exp.Texp e = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= string 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Tstring s = (jp.co.mra.ecodsl.exp.Tstring)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = s; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= ident 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Tident i = (jp.co.mra.ecodsl.exp.Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = i; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= index 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Tindex i = (jp.co.mra.ecodsl.exp.Tindex)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = i; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= value 
            {
              jp.co.mra.ecodsl.exp.Texp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Tvalue n = (jp.co.mra.ecodsl.exp.Tvalue)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = n; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ope ::= postwhile SEMICOLON 
            {
              jp.co.mra.ecodsl.command.Tope RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.command.Tpostwhile w = (jp.co.mra.ecodsl.command.Tpostwhile)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tope(w); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ope ::= prewhile SEMICOLON 
            {
              jp.co.mra.ecodsl.command.Tope RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.command.Tprewhile w = (jp.co.mra.ecodsl.command.Tprewhile)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tope(w); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ope ::= if SEMICOLON 
            {
              jp.co.mra.ecodsl.command.Tope RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.command.Tifthenelse i = (jp.co.mra.ecodsl.command.Tifthenelse)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tope(i); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ope ::= let SEMICOLON 
            {
              jp.co.mra.ecodsl.command.Tope RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.command.Tlet l = (jp.co.mra.ecodsl.command.Tlet)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tope(l); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opelist ::= opelist ope 
            {
              jp.co.mra.ecodsl.command.Topelist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.command.Topelist l = (jp.co.mra.ecodsl.command.Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.command.Tope o = (jp.co.mra.ecodsl.command.Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.command.Topelist(l,o); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opelist ::= ope 
            {
              jp.co.mra.ecodsl.command.Topelist RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.command.Tope o = (jp.co.mra.ecodsl.command.Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.command.Topelist(o);
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // explist ::= exp COMMA explist 
            {
              jp.co.mra.ecodsl.exp.Texplist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		jp.co.mra.ecodsl.exp.Texp e = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texplist l = (jp.co.mra.ecodsl.exp.Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Texplist(e, l); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // explist ::= exp 
            {
              jp.co.mra.ecodsl.exp.Texplist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.exp.Texp e = (jp.co.mra.ecodsl.exp.Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.exp.Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		jp.co.mra.ecodsl.command.Tprogram start_val = (jp.co.mra.ecodsl.command.Tprogram)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		RESULT = start_val;
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EcoModelParser$parser.done_parsing();
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= opelist 
            {
              jp.co.mra.ecodsl.command.Tprogram RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		jp.co.mra.ecodsl.command.Topelist ol = (jp.co.mra.ecodsl.command.Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new jp.co.mra.ecodsl.command.Tprogram(ol); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

