
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 24 14:57:58 JST 2014
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 24 14:57:58 JST 2014
  */
public class EcoModelParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EcoModelParser() {super();}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\004\003\000\002\004\004" +
    "\000\002\005\004\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\006" +
    "\000\002\007\003\000\002\007\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\010" +
    "\003\000\002\011\003\000\002\013\003\000\002\012\005" +
    "\000\002\012\005\000\002\014\011\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\010\004\013\032\012\036\011\001\002\000" +
    "\004\012\106\001\002\000\004\012\105\001\002\000\004" +
    "\005\103\001\002\000\012\002\001\004\013\032\012\036" +
    "\011\001\002\000\004\002\102\001\002\000\022\006\024" +
    "\007\022\013\017\031\021\032\012\033\025\034\052\035" +
    "\054\001\002\000\044\005\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\037\uffe5" +
    "\001\002\000\004\005\015\001\002\000\020\002\ufffd\004" +
    "\ufffd\012\ufffd\032\ufffd\036\ufffd\040\ufffd\041\ufffd\001\002" +
    "\000\016\006\024\007\022\013\017\031\021\032\012\033" +
    "\025\001\002\000\014\012\uffe1\015\032\016\031\017\034" +
    "\020\033\001\002\000\016\006\024\007\022\013\017\031" +
    "\021\032\012\033\025\001\002\000\042\010\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\037\ufff8\001\002\000\042\010\uffe4\011\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\037\uffe4\001" +
    "\002\000\020\006\024\007\022\010\044\013\017\031\021" +
    "\032\012\033\025\001\002\000\042\010\ufff7\011\ufff7\012" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\037" +
    "\ufff7\001\002\000\004\013\027\001\002\000\042\010\uffe3" +
    "\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\037\uffe3\001\002\000\042\010\ufff9\011\ufff9\012" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\037" +
    "\ufff9\001\002\000\016\006\024\007\022\013\017\031\021" +
    "\032\012\033\025\001\002\000\014\014\035\015\032\016" +
    "\031\017\034\020\033\001\002\000\016\006\024\007\022" +
    "\013\017\031\021\032\012\033\025\001\002\000\016\006" +
    "\024\007\022\013\017\031\021\032\012\033\025\001\002" +
    "\000\016\006\024\007\022\013\017\031\021\032\012\033" +
    "\025\001\002\000\016\006\024\007\022\013\017\031\021" +
    "\032\012\033\025\001\002\000\042\010\uffef\011\uffef\012" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\037" +
    "\uffef\001\002\000\042\010\ufff2\011\ufff2\012\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\037\ufff2\001\002" +
    "\000\042\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\037\ufff1\001\002\000\042\010" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\034" +
    "\020\033\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\037\ufff0\001\002\000\042\010\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\034\020\033\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\037\ufff3\001\002\000\016\010\uffff\011\uffff\015\032\016" +
    "\031\017\034\020\033\001\002\000\006\010\046\011\045" +
    "\001\002\000\042\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\037\ufff4\001\002\000" +
    "\016\006\024\007\022\013\017\031\021\032\012\033\025" +
    "\001\002\000\042\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\037\ufff5\001\002\000" +
    "\016\010\ufffe\011\ufffe\015\032\016\031\017\034\020\033" +
    "\001\002\000\014\014\051\015\032\016\031\017\034\020" +
    "\033\001\002\000\042\010\ufff6\011\ufff6\012\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\037\ufff6\001\002" +
    "\000\010\027\uffee\030\uffee\037\uffee\001\002\000\024\015" +
    "\032\016\031\017\034\020\033\022\071\023\072\024\074" +
    "\025\070\026\073\001\002\000\010\027\uffed\030\uffed\037" +
    "\uffed\001\002\000\010\027\056\030\060\037\057\001\002" +
    "\000\022\006\024\007\022\013\017\031\021\032\012\033" +
    "\025\034\052\035\054\001\002\000\010\004\013\032\012" +
    "\036\011\001\002\000\022\006\024\007\022\013\017\031" +
    "\021\032\012\033\025\034\052\035\054\001\002\000\010" +
    "\027\056\030\uffe6\037\uffe6\001\002\000\014\004\013\012" +
    "\uffdf\032\012\036\011\040\063\001\002\000\010\004\013" +
    "\032\012\036\011\001\002\000\020\002\ufffc\004\ufffc\012" +
    "\ufffc\032\ufffc\036\ufffc\040\ufffc\041\ufffc\001\002\000\012" +
    "\004\013\032\012\036\011\041\066\001\002\000\004\012" +
    "\uffe0\001\002\000\010\027\uffe7\030\uffe7\037\uffe7\001\002" +
    "\000\016\006\024\007\022\013\017\031\021\032\012\033" +
    "\025\001\002\000\016\006\024\007\022\013\017\031\021" +
    "\032\012\033\025\001\002\000\016\006\024\007\022\013" +
    "\017\031\021\032\012\033\025\001\002\000\016\006\024" +
    "\007\022\013\017\031\021\032\012\033\025\001\002\000" +
    "\016\006\024\007\022\013\017\031\021\032\012\033\025" +
    "\001\002\000\020\015\032\016\031\017\034\020\033\027" +
    "\uffea\030\uffea\037\uffea\001\002\000\020\015\032\016\031" +
    "\017\034\020\033\027\uffe8\030\uffe8\037\uffe8\001\002\000" +
    "\020\015\032\016\031\017\034\020\033\027\uffeb\030\uffeb" +
    "\037\uffeb\001\002\000\020\015\032\016\031\017\034\020" +
    "\033\027\uffec\030\uffec\037\uffec\001\002\000\020\015\032" +
    "\016\031\017\034\020\033\027\uffe9\030\uffe9\037\uffe9\001" +
    "\002\000\004\002\000\001\002\000\016\006\024\007\022" +
    "\013\017\031\021\032\012\033\025\001\002\000\014\012" +
    "\uffe2\015\032\016\031\017\034\020\033\001\002\000\020" +
    "\002\ufffb\004\ufffb\012\ufffb\032\ufffb\036\ufffb\040\ufffb\041" +
    "\ufffb\001\002\000\020\002\ufffa\004\ufffa\012\ufffa\032\ufffa" +
    "\036\ufffa\040\ufffa\041\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\016\002\007\004\006\005\013\010\005\012" +
    "\004\014\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\063\010\005\012\004\014" +
    "\003\001\001\000\002\001\001\000\014\006\052\007\054" +
    "\010\017\011\025\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\015\010\017" +
    "\011\025\013\022\001\001\000\002\001\001\000\012\006" +
    "\047\010\017\011\025\013\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\042\006\041\010\017\011" +
    "\025\013\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\027\010" +
    "\017\011\025\013\022\001\001\000\002\001\001\000\012" +
    "\006\040\010\017\011\025\013\022\001\001\000\012\006" +
    "\037\010\017\011\025\013\022\001\001\000\012\006\036" +
    "\010\017\011\025\013\022\001\001\000\012\006\035\010" +
    "\017\011\025\013\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\046\010\017\011\025\013\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\052\007\066\010\017" +
    "\011\025\013\022\001\001\000\014\004\061\005\013\010" +
    "\005\012\004\014\003\001\001\000\014\006\052\007\060" +
    "\010\017\011\025\013\022\001\001\000\002\001\001\000" +
    "\012\005\063\010\005\012\004\014\003\001\001\000\014" +
    "\004\064\005\013\010\005\012\004\014\003\001\001\000" +
    "\002\001\001\000\012\005\063\010\005\012\004\014\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\100\010\017\011\025\013\022\001\001\000\012\006\077" +
    "\010\017\011\025\013\022\001\001\000\012\006\076\010" +
    "\017\011\025\013\022\001\001\000\012\006\075\010\017" +
    "\011\025\013\022\001\001\000\012\006\074\010\017\011" +
    "\025\013\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\103\010\017\011\025\013\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EcoModelParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EcoModelParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EcoModelParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EcoModelParser$actions {
  private final EcoModelParser parser;

  /** Constructor */
  CUP$EcoModelParser$actions(EcoModelParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EcoModelParser$do_action(
    int                        CUP$EcoModelParser$act_num,
    java_cup.runtime.lr_parser CUP$EcoModelParser$parser,
    java.util.Stack            CUP$EcoModelParser$stack,
    int                        CUP$EcoModelParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EcoModelParser$result;

      /* select the action based on the action number */
      switch (CUP$EcoModelParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if ::= IF boolexp THEN opelist 
            {
              Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Topelist t = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tifthenelse(b,t); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if ::= IF boolexp THEN opelist ELSE opelist ENDIF 
            {
              Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).right;
		Topelist t = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist e = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tifthenelse(b,t,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-6)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // let ::= CON LET exp 
            {
              Tlet RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tlet(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",8, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // let ::= ident LET exp 
            {
              Tlet RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tlet(i,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",8, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // string ::= STRINGLITERAL 
            {
              Tstring RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tstring(s); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("string",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // value ::= VALUE 
            {
              Tvalue RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tvalue(z); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ident ::= ID 
            {
              Tident RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tident(n); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ident",6, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexp ::= boolexp OR boolexp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp l = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tboolexp r = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'|',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexp ::= boolexp AND boolexp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp l = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tboolexp r = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'&',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexp ::= exp GEQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'$',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexp ::= exp GE exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'>',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexp ::= exp LEQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'!',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexp ::= exp LE exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'<',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolexp ::= exp EQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'=',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolexp ::= FALSE 
            {
              Tboolexp RESULT =null;
		 RESULT = new Tboolexp(false); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolexp ::= TRUE 
            {
              Tboolexp RESULT =null;
		 RESULT = new Tboolexp(true); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= SIGMA LPAR exp RPAR 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tsigma(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp MINUS exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'-',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp DIV exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'/',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp TIMES exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'*',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp PLUS exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'+',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= LEFTB RIGHTB 
            {
              Texp RESULT =null;
		 RESULT = new Texplist(); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= LEFTB explist RIGHTB 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texplist e = (Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= LPAR exp RPAR 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= string 
            {
              Texp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tstring s = (Tstring)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = s; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= ident 
            {
              Texp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = i; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= value 
            {
              Texp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tvalue n = (Tvalue)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = n; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ope ::= if SEMICOLON 
            {
              Tope RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tifthenelse i = (Tifthenelse)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(i); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ope ::= let SEMICOLON 
            {
              Tope RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tlet l = (Tlet)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(l); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opelist ::= opelist ope 
            {
              Topelist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tope o = (Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Topelist(l,o); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opelist ::= ope 
            {
              Topelist RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tope o = (Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Topelist(o);
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // explist ::= explist COMMA exp 
            {
              Texplist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texplist l = (Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texplist(l,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // explist ::= exp 
            {
              Texplist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tprogram start_val = (Tprogram)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		RESULT = start_val;
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EcoModelParser$parser.done_parsing();
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= opelist 
            {
              Tprogram RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Topelist ol = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tprogram(ol); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

