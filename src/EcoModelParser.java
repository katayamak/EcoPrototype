
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 29 14:34:57 JST 2014
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 29 14:34:57 JST 2014
  */
public class EcoModelParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EcoModelParser() {super();}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\004\003\000\002\004\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\006\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\010\003\000\002\011\003\000\002\012\003\000" +
    "\002\014\003\000\002\013\005\000\002\013\005\000\002" +
    "\015\011\000\002\015\006\000\002\016\011\000\002\017" +
    "\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\014\004\015\036\014\042\013\046\005\047" +
    "\020\001\002\000\004\013\137\001\002\000\004\014\131" +
    "\001\002\000\004\013\130\001\002\000\004\013\127\001" +
    "\002\000\004\002\126\001\002\000\004\005\124\001\002" +
    "\000\016\002\001\004\015\036\014\042\013\046\005\047" +
    "\020\001\002\000\024\006\037\010\035\014\032\034\034" +
    "\035\027\036\014\037\042\040\030\041\041\001\002\000" +
    "\044\005\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\043\uffe1\001\002\000\004" +
    "\005\114\001\002\000\004\013\113\001\002\000\026\002" +
    "\ufffd\004\ufffd\013\ufffd\017\ufffd\036\ufffd\042\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\001\002\000\004\016\021\001" +
    "\002\000\014\004\015\036\014\042\013\046\005\047\020" +
    "\001\002\000\016\004\015\017\024\036\014\042\013\046" +
    "\005\047\020\001\002\000\026\002\ufffc\004\ufffc\013\ufffc" +
    "\017\ufffc\036\ufffc\042\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\001\002\000\004\046\025\001\002\000\004\014\026" +
    "\001\002\000\024\006\037\010\035\014\032\034\034\035" +
    "\027\036\014\037\042\040\030\041\041\001\002\000\042" +
    "\011\uffdf\012\uffdf\013\uffdf\015\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\043\uffdf\001\002\000\012\015\uffeb\032" +
    "\uffeb\033\uffeb\043\uffeb\001\002\000\024\020\057\021\056" +
    "\022\062\023\060\025\102\026\103\027\105\030\101\031" +
    "\104\001\002\000\024\006\037\010\035\014\032\034\034" +
    "\035\027\036\014\037\042\040\030\041\041\001\002\000" +
    "\042\011\ufff5\012\ufff5\013\ufff5\015\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\043\ufff5\001\002\000\042\011\uffe0" +
    "\012\uffe0\013\uffe0\015\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\043\uffe0\001\002\000\022\006\037\010\035\011" +
    "\072\014\054\034\034\035\027\036\014\037\042\001\002" +
    "\000\042\011\ufff4\012\ufff4\013\ufff4\015\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\043\ufff4\001\002\000\004\014" +
    "\052\001\002\000\042\011\ufff6\012\ufff6\013\ufff6\015\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\043\ufff6\001\002" +
    "\000\012\015\uffea\032\uffea\033\uffea\043\uffea\001\002\000" +
    "\042\011\uffde\012\uffde\013\uffde\015\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\043\uffde\001\002\000\042\011\ufff7" +
    "\012\ufff7\013\ufff7\015\ufff7\020\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\043\ufff7\001\002\000\010\015\047\032\045\033" +
    "\046\001\002\000\024\006\037\010\035\014\032\034\034" +
    "\035\027\036\014\037\042\040\030\041\041\001\002\000" +
    "\024\006\037\010\035\014\032\034\034\035\027\036\014" +
    "\037\042\040\030\041\041\001\002\000\004\013\uffd8\001" +
    "\002\000\012\015\uffe3\032\045\033\uffe3\043\uffe3\001\002" +
    "\000\012\015\uffe4\032\uffe4\033\uffe4\043\uffe4\001\002\000" +
    "\020\006\037\010\035\014\054\034\034\035\027\036\014" +
    "\037\042\001\002\000\014\015\067\020\057\021\056\022" +
    "\062\023\060\001\002\000\020\006\037\010\035\014\054" +
    "\034\034\035\027\036\014\037\042\001\002\000\014\015" +
    "\061\020\057\021\056\022\062\023\060\001\002\000\020" +
    "\006\037\010\035\014\054\034\034\035\027\036\014\037" +
    "\042\001\002\000\020\006\037\010\035\014\054\034\034" +
    "\035\027\036\014\037\042\001\002\000\020\006\037\010" +
    "\035\014\054\034\034\035\027\036\014\037\042\001\002" +
    "\000\042\011\ufff3\012\ufff3\013\ufff3\015\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\043\ufff3\001\002\000\020\006" +
    "\037\010\035\014\054\034\034\035\027\036\014\037\042" +
    "\001\002\000\042\011\uffef\012\uffef\013\uffef\015\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\043\uffef\001\002\000" +
    "\042\011\uffee\012\uffee\013\uffee\015\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\043\uffee\001\002\000\042\011\uffed" +
    "\012\uffed\013\uffed\015\uffed\020\uffed\021\uffed\022\062\023" +
    "\060\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\043\uffed\001\002\000\042\011\ufff0\012\ufff0\013" +
    "\ufff0\015\ufff0\020\ufff0\021\ufff0\022\062\023\060\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\043" +
    "\ufff0\001\002\000\042\011\uffec\012\uffec\013\uffec\015\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\043\uffec\001\002" +
    "\000\016\011\uffff\012\uffff\020\057\021\056\022\062\023" +
    "\060\001\002\000\006\011\074\012\073\001\002\000\042" +
    "\011\ufff1\012\ufff1\013\ufff1\015\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\043\ufff1\001\002\000\020\006\037\010" +
    "\035\014\054\034\034\035\027\036\014\037\042\001\002" +
    "\000\042\011\ufff2\012\ufff2\013\ufff2\015\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\043\ufff2\001\002\000\016\011" +
    "\ufffe\012\ufffe\020\057\021\056\022\062\023\060\001\002" +
    "\000\026\015\061\020\057\021\056\022\062\023\060\025" +
    "\102\026\103\027\105\030\101\031\104\001\002\000\010" +
    "\015\100\032\045\033\046\001\002\000\012\015\uffe2\032" +
    "\uffe2\033\uffe2\043\uffe2\001\002\000\020\006\037\010\035" +
    "\014\054\034\034\035\027\036\014\037\042\001\002\000" +
    "\020\006\037\010\035\014\054\034\034\035\027\036\014" +
    "\037\042\001\002\000\020\006\037\010\035\014\054\034" +
    "\034\035\027\036\014\037\042\001\002\000\020\006\037" +
    "\010\035\014\054\034\034\035\027\036\014\037\042\001" +
    "\002\000\020\006\037\010\035\014\054\034\034\035\027" +
    "\036\014\037\042\001\002\000\022\015\uffe7\020\057\021" +
    "\056\022\062\023\060\032\uffe7\033\uffe7\043\uffe7\001\002" +
    "\000\022\015\uffe5\020\057\021\056\022\062\023\060\032" +
    "\uffe5\033\uffe5\043\uffe5\001\002\000\022\015\uffe8\020\057" +
    "\021\056\022\062\023\060\032\uffe8\033\uffe8\043\uffe8\001" +
    "\002\000\022\015\uffe9\020\057\021\056\022\062\023\060" +
    "\032\uffe9\033\uffe9\043\uffe9\001\002\000\022\015\uffe6\020" +
    "\057\021\056\022\062\023\060\032\uffe6\033\uffe6\043\uffe6" +
    "\001\002\000\026\002\ufff8\004\ufff8\013\ufff8\017\ufff8\036" +
    "\ufff8\042\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\001\002" +
    "\000\020\006\037\010\035\014\054\034\034\035\027\036" +
    "\014\037\042\001\002\000\014\013\uffdc\020\057\021\056" +
    "\022\062\023\060\001\002\000\010\032\045\033\046\043" +
    "\117\001\002\000\014\004\015\036\014\042\013\046\005" +
    "\047\020\001\002\000\020\004\015\013\uffda\036\014\042" +
    "\013\044\121\046\005\047\020\001\002\000\014\004\015" +
    "\036\014\042\013\046\005\047\020\001\002\000\016\004" +
    "\015\036\014\042\013\045\123\046\005\047\020\001\002" +
    "\000\004\013\uffdb\001\002\000\020\006\037\010\035\014" +
    "\054\034\034\035\027\036\014\037\042\001\002\000\014" +
    "\013\uffdd\020\057\021\056\022\062\023\060\001\002\000" +
    "\004\002\000\001\002\000\026\002\ufffb\004\ufffb\013\ufffb" +
    "\017\ufffb\036\ufffb\042\ufffb\044\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\001\002\000\026\002\ufff9\004\ufff9\013\ufff9\017\ufff9" +
    "\036\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\001" +
    "\002\000\024\006\037\010\035\014\032\034\034\035\027" +
    "\036\014\037\042\040\030\041\041\001\002\000\010\015" +
    "\133\032\045\033\046\001\002\000\004\016\134\001\002" +
    "\000\014\004\015\036\014\042\013\046\005\047\020\001" +
    "\002\000\016\004\015\017\136\036\014\042\013\046\005" +
    "\047\020\001\002\000\004\013\uffd9\001\002\000\026\002" +
    "\ufffa\004\ufffa\013\ufffa\017\ufffa\036\ufffa\042\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\022\002\007\004\011\005\016\010\010\013" +
    "\006\015\003\016\005\017\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\022\010\010" +
    "\013\006\015\003\016\005\017\015\001\001\000\016\006" +
    "\030\007\115\010\032\011\042\012\037\014\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\021\005\016" +
    "\010\010\013\006\015\003\016\005\017\015\001\001\000" +
    "\016\005\022\010\010\013\006\015\003\016\005\017\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\030\007\043\010\032\011\042\012\037" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\075\007\076\010\032\011\042" +
    "\012\037\014\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\070\006\067\010\032\011\042\012\037" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\030\007\050\010" +
    "\032\011\042\012\037\014\035\001\001\000\016\006\030" +
    "\007\047\010\032\011\042\012\037\014\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\052\010\032\011\042\012\037\014\035\001\001\000" +
    "\002\001\001\000\014\006\054\010\032\011\042\012\037" +
    "\014\035\001\001\000\002\001\001\000\014\006\065\010" +
    "\032\011\042\012\037\014\035\001\001\000\014\006\064" +
    "\010\032\011\042\012\037\014\035\001\001\000\014\006" +
    "\063\010\032\011\042\012\037\014\035\001\001\000\002" +
    "\001\001\000\014\006\062\010\032\011\042\012\037\014" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\074" +
    "\010\032\011\042\012\037\014\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\111\010\032\011\042\012" +
    "\037\014\035\001\001\000\014\006\110\010\032\011\042" +
    "\012\037\014\035\001\001\000\014\006\107\010\032\011" +
    "\042\012\037\014\035\001\001\000\014\006\106\010\032" +
    "\011\042\012\037\014\035\001\001\000\014\006\105\010" +
    "\032\011\042\012\037\014\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\114\010\032" +
    "\011\042\012\037\014\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\117\005\016\010\010\013\006" +
    "\015\003\016\005\017\015\001\001\000\016\005\022\010" +
    "\010\013\006\015\003\016\005\017\015\001\001\000\020" +
    "\004\121\005\016\010\010\013\006\015\003\016\005\017" +
    "\015\001\001\000\016\005\022\010\010\013\006\015\003" +
    "\016\005\017\015\001\001\000\002\001\001\000\014\006" +
    "\124\010\032\011\042\012\037\014\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\030\007\131\010\032\011\042\012\037" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\134\005\016\010\010\013\006\015\003\016\005" +
    "\017\015\001\001\000\016\005\022\010\010\013\006\015" +
    "\003\016\005\017\015\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EcoModelParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EcoModelParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EcoModelParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EcoModelParser$actions {
  private final EcoModelParser parser;

  /** Constructor */
  CUP$EcoModelParser$actions(EcoModelParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EcoModelParser$do_action(
    int                        CUP$EcoModelParser$act_num,
    java_cup.runtime.lr_parser CUP$EcoModelParser$parser,
    java.util.Stack            CUP$EcoModelParser$stack,
    int                        CUP$EcoModelParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EcoModelParser$result;

      /* select the action based on the action number */
      switch (CUP$EcoModelParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // postwhile ::= DO LEFTCB opelist RIGHTCB WHILE LPAR boolexp RPAR 
            {
              Tpostwhile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tpostwhile(b, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("postwhile",13, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-7)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // prewhile ::= WHILE LPAR boolexp RPAR LEFTCB opelist RIGHTCB 
            {
              Tprewhile RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tprewhile(b, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("prewhile",12, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-6)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= IF boolexp THEN opelist 
            {
              Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Topelist t = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tifthenelse(b,t); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF boolexp THEN opelist ELSE opelist ENDIF 
            {
              Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).right;
		Topelist t = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist e = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tifthenelse(b,t,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-6)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // let ::= CON LET exp 
            {
              Tlet RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tlet(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // let ::= ident LET exp 
            {
              Tlet RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tlet(i,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // string ::= STRINGLITERAL 
            {
              Tstring RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tstring(s); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("string",10, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // index ::= INDEX 
            {
              Tindex RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tindex(z); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("index",8, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= VALUE 
            {
              Tvalue RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tvalue(z); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ident ::= ID 
            {
              Tident RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tident(n); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ident",6, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolexp ::= LPAR boolexp RPAR 
            {
              Tboolexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tboolexp e = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolexp ::= boolexp OR boolexp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp l = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tboolexp r = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'|',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolexp ::= boolexp AND boolexp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp l = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tboolexp r = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'&',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolexp ::= exp GEQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'$',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexp ::= exp GE exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'>',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexp ::= exp LEQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'!',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexp ::= exp LE exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'<',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexp ::= exp EQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'=',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexp ::= FALSE 
            {
              Tboolexp RESULT =null;
		 RESULT = new Tboolexp(false); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexp ::= TRUE 
            {
              Tboolexp RESULT =null;
		 RESULT = new Tboolexp(true); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= SIGMA LPAR exp RPAR 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tsigma(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp MINUS exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'-',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp DIV exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'/',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp TIMES exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'*',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp PLUS exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'+',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= LEFTB RIGHTB 
            {
              Texp RESULT =null;
		 RESULT = new Texplist(); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= LEFTB explist RIGHTB 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texplist e = (Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= LPAR exp RPAR 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= string 
            {
              Texp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tstring s = (Tstring)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = s; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= ident 
            {
              Texp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = i; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= index 
            {
              Texp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tindex i = (Tindex)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = i; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= value 
            {
              Texp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tvalue n = (Tvalue)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = n; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ope ::= postwhile SEMICOLON 
            {
              Tope RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tpostwhile w = (Tpostwhile)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(w); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ope ::= prewhile SEMICOLON 
            {
              Tope RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tprewhile w = (Tprewhile)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(w); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ope ::= if SEMICOLON 
            {
              Tope RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tifthenelse i = (Tifthenelse)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(i); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ope ::= let SEMICOLON 
            {
              Tope RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tlet l = (Tlet)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(l); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opelist ::= opelist ope 
            {
              Topelist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tope o = (Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Topelist(l,o); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opelist ::= ope 
            {
              Topelist RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tope o = (Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Topelist(o);
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // explist ::= explist COMMA exp 
            {
              Texplist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texplist l = (Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texplist(l,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // explist ::= exp 
            {
              Texplist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tprogram start_val = (Tprogram)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		RESULT = start_val;
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EcoModelParser$parser.done_parsing();
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= opelist 
            {
              Tprogram RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Topelist ol = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tprogram(ol); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

