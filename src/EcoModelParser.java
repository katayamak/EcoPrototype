
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 27 12:18:49 JST 2014
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 27 12:18:49 JST 2014
  */
public class EcoModelParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EcoModelParser() {super();}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\004\003\000\002\004\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\006\000\002\007\003\000" +
    "\002\007\003\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\010\003" +
    "\000\002\011\003\000\002\013\003\000\002\012\005\000" +
    "\002\012\005\000\002\014\011\000\002\014\006\000\002" +
    "\015\007\000\002\016\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\014\004\015\032\014\036\013\042\005\043" +
    "\020\001\002\000\004\012\130\001\002\000\022\006\033" +
    "\007\032\013\026\031\030\032\014\033\035\034\024\035" +
    "\034\001\002\000\004\012\126\001\002\000\004\012\125" +
    "\001\002\000\004\002\124\001\002\000\004\005\122\001" +
    "\002\000\016\002\001\004\015\032\014\036\013\042\005" +
    "\043\020\001\002\000\022\006\033\007\032\013\026\031" +
    "\030\032\014\033\035\034\024\035\034\001\002\000\050" +
    "\005\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\037\uffe2\043\uffe2\044\uffe2\001" +
    "\002\000\004\005\112\001\002\000\004\012\111\001\002" +
    "\000\026\002\ufffd\004\ufffd\012\ufffd\032\ufffd\036\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\001\002\000\014" +
    "\004\015\032\014\036\013\042\005\043\020\001\002\000" +
    "\014\004\015\032\014\036\013\042\022\043\020\001\002" +
    "\000\022\006\033\007\032\013\026\031\030\032\014\033" +
    "\035\034\024\035\034\001\002\000\026\002\ufffc\004\ufffc" +
    "\012\ufffc\032\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\001\002\000\016\014\uffec\027\uffec\030\uffec" +
    "\037\uffec\043\uffec\044\uffec\001\002\000\024\015\055\016" +
    "\054\017\057\020\056\022\100\023\101\024\103\025\077" +
    "\026\102\001\002\000\022\006\033\007\032\013\026\031" +
    "\030\032\014\033\035\034\024\035\034\001\002\000\046" +
    "\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\037\ufff6\043\ufff6\044\ufff6\001\002\000" +
    "\046\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\037\uffe1\043\uffe1\044\uffe1\001\002" +
    "\000\046\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\037\ufff5\043\ufff5\044\ufff5\001" +
    "\002\000\020\006\033\007\032\010\070\013\052\031\030" +
    "\032\014\033\035\001\002\000\004\013\050\001\002\000" +
    "\016\014\uffeb\027\uffeb\030\uffeb\037\uffeb\043\uffeb\044\uffeb" +
    "\001\002\000\046\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\037\uffe0\043\uffe0\044" +
    "\uffe0\001\002\000\046\010\ufff7\011\ufff7\012\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\037\ufff7\043\ufff7" +
    "\044\ufff7\001\002\000\012\027\041\030\043\043\040\044" +
    "\042\001\002\000\014\004\015\032\014\036\013\042\005" +
    "\043\020\001\002\000\022\006\033\007\032\013\026\031" +
    "\030\032\014\033\035\034\024\035\034\001\002\000\004" +
    "\012\uffda\001\002\000\022\006\033\007\032\013\026\031" +
    "\030\032\014\033\035\034\024\035\034\001\002\000\016" +
    "\014\uffe4\027\041\030\uffe4\037\uffe4\043\uffe4\044\uffe4\001" +
    "\002\000\016\014\uffe5\027\uffe5\030\uffe5\037\uffe5\043\uffe5" +
    "\044\uffe5\001\002\000\016\004\015\032\014\036\013\042" +
    "\005\043\020\044\047\001\002\000\004\012\uffdb\001\002" +
    "\000\016\006\033\007\032\013\052\031\030\032\014\033" +
    "\035\001\002\000\014\014\065\015\055\016\054\017\057" +
    "\020\056\001\002\000\016\006\033\007\032\013\052\031" +
    "\030\032\014\033\035\001\002\000\014\014\060\015\055" +
    "\016\054\017\057\020\056\001\002\000\016\006\033\007" +
    "\032\013\052\031\030\032\014\033\035\001\002\000\016" +
    "\006\033\007\032\013\052\031\030\032\014\033\035\001" +
    "\002\000\016\006\033\007\032\013\052\031\030\032\014" +
    "\033\035\001\002\000\016\006\033\007\032\013\052\031" +
    "\030\032\014\033\035\001\002\000\046\010\ufff4\011\ufff4" +
    "\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\037\ufff4\043\ufff4\044\ufff4\001\002\000\046\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\037\ufff0\043\ufff0\044\ufff0\001\002\000\046\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\037\uffef\043\uffef\044\uffef\001\002\000\046\010" +
    "\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\057" +
    "\020\056\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\037\uffee\043\uffee\044\uffee\001\002\000\046" +
    "\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\057\020\056\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\037\ufff1\043\ufff1\044\ufff1\001\002\000" +
    "\046\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\037\uffed\043\uffed\044\uffed\001\002" +
    "\000\016\010\uffff\011\uffff\015\055\016\054\017\057\020" +
    "\056\001\002\000\006\010\072\011\071\001\002\000\046" +
    "\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\037\ufff2\043\ufff2\044\ufff2\001\002\000" +
    "\016\006\033\007\032\013\052\031\030\032\014\033\035" +
    "\001\002\000\046\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\037\ufff3\043\ufff3\044" +
    "\ufff3\001\002\000\016\010\ufffe\011\ufffe\015\055\016\054" +
    "\017\057\020\056\001\002\000\026\014\060\015\055\016" +
    "\054\017\057\020\056\022\100\023\101\024\103\025\077" +
    "\026\102\001\002\000\010\014\076\027\041\030\043\001" +
    "\002\000\016\014\uffe3\027\uffe3\030\uffe3\037\uffe3\043\uffe3" +
    "\044\uffe3\001\002\000\016\006\033\007\032\013\052\031" +
    "\030\032\014\033\035\001\002\000\016\006\033\007\032" +
    "\013\052\031\030\032\014\033\035\001\002\000\016\006" +
    "\033\007\032\013\052\031\030\032\014\033\035\001\002" +
    "\000\016\006\033\007\032\013\052\031\030\032\014\033" +
    "\035\001\002\000\016\006\033\007\032\013\052\031\030" +
    "\032\014\033\035\001\002\000\026\014\uffe8\015\055\016" +
    "\054\017\057\020\056\027\uffe8\030\uffe8\037\uffe8\043\uffe8" +
    "\044\uffe8\001\002\000\026\014\uffe6\015\055\016\054\017" +
    "\057\020\056\027\uffe6\030\uffe6\037\uffe6\043\uffe6\044\uffe6" +
    "\001\002\000\026\014\uffe9\015\055\016\054\017\057\020" +
    "\056\027\uffe9\030\uffe9\037\uffe9\043\uffe9\044\uffe9\001\002" +
    "\000\026\014\uffea\015\055\016\054\017\057\020\056\027" +
    "\uffea\030\uffea\037\uffea\043\uffea\044\uffea\001\002\000\026" +
    "\014\uffe7\015\055\016\054\017\057\020\056\027\uffe7\030" +
    "\uffe7\037\uffe7\043\uffe7\044\uffe7\001\002\000\026\002\ufff8" +
    "\004\ufff8\012\ufff8\032\ufff8\036\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\001\002\000\016\006\033\007\032" +
    "\013\052\031\030\032\014\033\035\001\002\000\014\012" +
    "\uffde\015\055\016\054\017\057\020\056\001\002\000\010" +
    "\027\041\030\043\037\115\001\002\000\014\004\015\032" +
    "\014\036\013\042\005\043\020\001\002\000\020\004\015" +
    "\012\uffdc\032\014\036\013\040\117\042\005\043\020\001" +
    "\002\000\014\004\015\032\014\036\013\042\005\043\020" +
    "\001\002\000\016\004\015\032\014\036\013\041\121\042" +
    "\005\043\020\001\002\000\004\012\uffdd\001\002\000\016" +
    "\006\033\007\032\013\052\031\030\032\014\033\035\001" +
    "\002\000\014\012\uffdf\015\055\016\054\017\057\020\056" +
    "\001\002\000\004\002\000\001\002\000\026\002\ufffb\004" +
    "\ufffb\012\ufffb\032\ufffb\036\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\001\002\000\026\002\ufff9\004\ufff9\012" +
    "\ufff9\032\ufff9\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\001\002\000\010\027\041\030\043\043\040\001" +
    "\002\000\026\002\ufffa\004\ufffa\012\ufffa\032\ufffa\036\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\022\002\007\004\011\005\016\010\010\012" +
    "\006\014\003\015\005\016\015\001\001\000\002\001\001" +
    "\000\014\006\024\007\126\010\026\011\035\013\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\022\010\010\012\006\014" +
    "\003\015\005\016\015\001\001\000\014\006\024\007\113" +
    "\010\026\011\035\013\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\020\005\016\010\010\012\006\014\003\015\005\016" +
    "\015\001\001\000\016\005\022\010\010\012\006\014\003" +
    "\015\005\016\015\001\001\000\014\006\024\007\036\010" +
    "\026\011\035\013\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\073\007\074\010" +
    "\026\011\035\013\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\066\006\065\010" +
    "\026\011\035\013\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\045\005\016\010\010\012\006\014\003" +
    "\015\005\016\015\001\001\000\014\006\024\007\044\010" +
    "\026\011\035\013\030\001\001\000\002\001\001\000\014" +
    "\006\024\007\043\010\026\011\035\013\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\022\010\010" +
    "\012\006\014\003\015\005\016\015\001\001\000\002\001" +
    "\001\000\012\006\050\010\026\011\035\013\030\001\001" +
    "\000\002\001\001\000\012\006\052\010\026\011\035\013" +
    "\030\001\001\000\002\001\001\000\012\006\063\010\026" +
    "\011\035\013\030\001\001\000\012\006\062\010\026\011" +
    "\035\013\030\001\001\000\012\006\061\010\026\011\035" +
    "\013\030\001\001\000\012\006\060\010\026\011\035\013" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\072\010\026\011\035\013\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\107\010\026\011" +
    "\035\013\030\001\001\000\012\006\106\010\026\011\035" +
    "\013\030\001\001\000\012\006\105\010\026\011\035\013" +
    "\030\001\001\000\012\006\104\010\026\011\035\013\030" +
    "\001\001\000\012\006\103\010\026\011\035\013\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\112\010\026\011\035\013\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\115\005\016\010" +
    "\010\012\006\014\003\015\005\016\015\001\001\000\016" +
    "\005\022\010\010\012\006\014\003\015\005\016\015\001" +
    "\001\000\020\004\117\005\016\010\010\012\006\014\003" +
    "\015\005\016\015\001\001\000\016\005\022\010\010\012" +
    "\006\014\003\015\005\016\015\001\001\000\002\001\001" +
    "\000\012\006\122\010\026\011\035\013\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EcoModelParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EcoModelParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EcoModelParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EcoModelParser$actions {
  private final EcoModelParser parser;

  /** Constructor */
  CUP$EcoModelParser$actions(EcoModelParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EcoModelParser$do_action(
    int                        CUP$EcoModelParser$act_num,
    java_cup.runtime.lr_parser CUP$EcoModelParser$parser,
    java.util.Stack            CUP$EcoModelParser$stack,
    int                        CUP$EcoModelParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EcoModelParser$result;

      /* select the action based on the action number */
      switch (CUP$EcoModelParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // postwhile ::= DO opelist WHILE boolexp ENDWHILE 
            {
              Tpostwhile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tpostwhile(b, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("postwhile",12, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // prewhile ::= WHILE boolexp DO opelist ENDWHILE 
            {
              Tprewhile RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tprewhile(b, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("prewhile",11, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF boolexp THEN opelist 
            {
              Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Topelist t = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tifthenelse(b,t); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if ::= IF boolexp THEN opelist ELSE opelist ENDIF 
            {
              Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).right;
		Topelist t = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist e = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tifthenelse(b,t,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-6)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // let ::= CON LET exp 
            {
              Tlet RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tlet(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",8, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // let ::= ident LET exp 
            {
              Tlet RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tlet(i,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",8, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // string ::= STRINGLITERAL 
            {
              Tstring RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tstring(s); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("string",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= VALUE 
            {
              Tvalue RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tvalue(z); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ident ::= ID 
            {
              Tident RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tident(n); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ident",6, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolexp ::= LPAR boolexp RPAR 
            {
              Tboolexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tboolexp e = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolexp ::= boolexp OR boolexp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp l = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tboolexp r = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'|',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolexp ::= boolexp AND boolexp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp l = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tboolexp r = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'&',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexp ::= exp GEQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'$',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexp ::= exp GE exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'>',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexp ::= exp LEQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'!',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexp ::= exp LE exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'<',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexp ::= exp EQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'=',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexp ::= FALSE 
            {
              Tboolexp RESULT =null;
		 RESULT = new Tboolexp(false); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolexp ::= TRUE 
            {
              Tboolexp RESULT =null;
		 RESULT = new Tboolexp(true); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= SIGMA LPAR exp RPAR 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tsigma(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp MINUS exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'-',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp DIV exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'/',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp TIMES exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'*',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp PLUS exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'+',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= LEFTB RIGHTB 
            {
              Texp RESULT =null;
		 RESULT = new Texplist(); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= LEFTB explist RIGHTB 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texplist e = (Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= LPAR exp RPAR 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= string 
            {
              Texp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tstring s = (Tstring)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = s; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= ident 
            {
              Texp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = i; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= value 
            {
              Texp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tvalue n = (Tvalue)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = n; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ope ::= postwhile SEMICOLON 
            {
              Tope RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tpostwhile w = (Tpostwhile)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(w); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ope ::= prewhile SEMICOLON 
            {
              Tope RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tprewhile w = (Tprewhile)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(w); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ope ::= if SEMICOLON 
            {
              Tope RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tifthenelse i = (Tifthenelse)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(i); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ope ::= let SEMICOLON 
            {
              Tope RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tlet l = (Tlet)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(l); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opelist ::= opelist ope 
            {
              Topelist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tope o = (Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Topelist(l,o); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opelist ::= ope 
            {
              Topelist RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tope o = (Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Topelist(o);
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // explist ::= explist COMMA exp 
            {
              Texplist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texplist l = (Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texplist(l,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // explist ::= exp 
            {
              Texplist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tprogram start_val = (Tprogram)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		RESULT = start_val;
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EcoModelParser$parser.done_parsing();
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= opelist 
            {
              Tprogram RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Topelist ol = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tprogram(ol); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

