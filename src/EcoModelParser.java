
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 28 18:06:55 JST 2014
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 28 18:06:55 JST 2014
  */
public class EcoModelParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EcoModelParser() {super();}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EcoModelParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\004\003\000\002\004\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\006\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\010\003\000\002\011\003\000\002\012\003\000" +
    "\002\014\003\000\002\013\005\000\002\013\005\000\002" +
    "\015\011\000\002\015\006\000\002\016\011\000\002\017" +
    "\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\014\004\015\035\014\041\013\045\005\046" +
    "\020\001\002\000\004\012\137\001\002\000\004\013\131" +
    "\001\002\000\004\012\130\001\002\000\004\012\127\001" +
    "\002\000\004\002\126\001\002\000\004\005\124\001\002" +
    "\000\016\002\001\004\015\035\014\041\013\045\005\046" +
    "\020\001\002\000\024\006\037\007\035\013\032\033\034" +
    "\034\027\035\014\036\042\037\030\040\041\001\002\000" +
    "\044\005\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\042\uffe1\001\002\000\004" +
    "\005\114\001\002\000\004\012\113\001\002\000\026\002" +
    "\ufffd\004\ufffd\012\ufffd\016\ufffd\035\ufffd\041\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\001\002\000\004\015\021\001" +
    "\002\000\014\004\015\035\014\041\013\045\005\046\020" +
    "\001\002\000\016\004\015\016\024\035\014\041\013\045" +
    "\005\046\020\001\002\000\026\002\ufffc\004\ufffc\012\ufffc" +
    "\016\ufffc\035\ufffc\041\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\001\002\000\004\045\025\001\002\000\004\013\026" +
    "\001\002\000\024\006\037\007\035\013\032\033\034\034" +
    "\027\035\014\036\042\037\030\040\041\001\002\000\042" +
    "\010\uffdf\011\uffdf\012\uffdf\014\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\042\uffdf\001\002\000\012\014\uffeb\031" +
    "\uffeb\032\uffeb\042\uffeb\001\002\000\024\017\057\020\056" +
    "\021\062\022\060\024\102\025\103\026\105\027\101\030" +
    "\104\001\002\000\024\006\037\007\035\013\032\033\034" +
    "\034\027\035\014\036\042\037\030\040\041\001\002\000" +
    "\042\010\ufff5\011\ufff5\012\ufff5\014\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\042\ufff5\001\002\000\042\010\uffe0" +
    "\011\uffe0\012\uffe0\014\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\042\uffe0\001\002\000\022\006\037\007\035\010" +
    "\072\013\054\033\034\034\027\035\014\036\042\001\002" +
    "\000\042\010\ufff4\011\ufff4\012\ufff4\014\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\042\ufff4\001\002\000\004\013" +
    "\052\001\002\000\042\010\ufff6\011\ufff6\012\ufff6\014\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\042\ufff6\001\002" +
    "\000\012\014\uffea\031\uffea\032\uffea\042\uffea\001\002\000" +
    "\042\010\uffde\011\uffde\012\uffde\014\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\042\uffde\001\002\000\042\010\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\042\ufff7\001\002\000\010\014\047\031\045\032" +
    "\046\001\002\000\024\006\037\007\035\013\032\033\034" +
    "\034\027\035\014\036\042\037\030\040\041\001\002\000" +
    "\024\006\037\007\035\013\032\033\034\034\027\035\014" +
    "\036\042\037\030\040\041\001\002\000\004\012\uffd8\001" +
    "\002\000\012\014\uffe3\031\045\032\uffe3\042\uffe3\001\002" +
    "\000\012\014\uffe4\031\uffe4\032\uffe4\042\uffe4\001\002\000" +
    "\020\006\037\007\035\013\054\033\034\034\027\035\014" +
    "\036\042\001\002\000\014\014\067\017\057\020\056\021" +
    "\062\022\060\001\002\000\020\006\037\007\035\013\054" +
    "\033\034\034\027\035\014\036\042\001\002\000\014\014" +
    "\061\017\057\020\056\021\062\022\060\001\002\000\020" +
    "\006\037\007\035\013\054\033\034\034\027\035\014\036" +
    "\042\001\002\000\020\006\037\007\035\013\054\033\034" +
    "\034\027\035\014\036\042\001\002\000\020\006\037\007" +
    "\035\013\054\033\034\034\027\035\014\036\042\001\002" +
    "\000\042\010\ufff3\011\ufff3\012\ufff3\014\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\042\ufff3\001\002\000\020\006" +
    "\037\007\035\013\054\033\034\034\027\035\014\036\042" +
    "\001\002\000\042\010\uffef\011\uffef\012\uffef\014\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\042\uffef\001\002\000" +
    "\042\010\uffee\011\uffee\012\uffee\014\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\042\uffee\001\002\000\042\010\uffed" +
    "\011\uffed\012\uffed\014\uffed\017\uffed\020\uffed\021\062\022" +
    "\060\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\042\uffed\001\002\000\042\010\ufff0\011\ufff0\012" +
    "\ufff0\014\ufff0\017\ufff0\020\ufff0\021\062\022\060\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\042" +
    "\ufff0\001\002\000\042\010\uffec\011\uffec\012\uffec\014\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\042\uffec\001\002" +
    "\000\016\010\uffff\011\uffff\017\057\020\056\021\062\022" +
    "\060\001\002\000\006\010\074\011\073\001\002\000\042" +
    "\010\ufff1\011\ufff1\012\ufff1\014\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\042\ufff1\001\002\000\020\006\037\007" +
    "\035\013\054\033\034\034\027\035\014\036\042\001\002" +
    "\000\042\010\ufff2\011\ufff2\012\ufff2\014\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\042\ufff2\001\002\000\016\010" +
    "\ufffe\011\ufffe\017\057\020\056\021\062\022\060\001\002" +
    "\000\026\014\061\017\057\020\056\021\062\022\060\024" +
    "\102\025\103\026\105\027\101\030\104\001\002\000\010" +
    "\014\100\031\045\032\046\001\002\000\012\014\uffe2\031" +
    "\uffe2\032\uffe2\042\uffe2\001\002\000\020\006\037\007\035" +
    "\013\054\033\034\034\027\035\014\036\042\001\002\000" +
    "\020\006\037\007\035\013\054\033\034\034\027\035\014" +
    "\036\042\001\002\000\020\006\037\007\035\013\054\033" +
    "\034\034\027\035\014\036\042\001\002\000\020\006\037" +
    "\007\035\013\054\033\034\034\027\035\014\036\042\001" +
    "\002\000\020\006\037\007\035\013\054\033\034\034\027" +
    "\035\014\036\042\001\002\000\022\014\uffe7\017\057\020" +
    "\056\021\062\022\060\031\uffe7\032\uffe7\042\uffe7\001\002" +
    "\000\022\014\uffe5\017\057\020\056\021\062\022\060\031" +
    "\uffe5\032\uffe5\042\uffe5\001\002\000\022\014\uffe8\017\057" +
    "\020\056\021\062\022\060\031\uffe8\032\uffe8\042\uffe8\001" +
    "\002\000\022\014\uffe9\017\057\020\056\021\062\022\060" +
    "\031\uffe9\032\uffe9\042\uffe9\001\002\000\022\014\uffe6\017" +
    "\057\020\056\021\062\022\060\031\uffe6\032\uffe6\042\uffe6" +
    "\001\002\000\026\002\ufff8\004\ufff8\012\ufff8\016\ufff8\035" +
    "\ufff8\041\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002" +
    "\000\020\006\037\007\035\013\054\033\034\034\027\035" +
    "\014\036\042\001\002\000\014\012\uffdc\017\057\020\056" +
    "\021\062\022\060\001\002\000\010\031\045\032\046\042" +
    "\117\001\002\000\014\004\015\035\014\041\013\045\005" +
    "\046\020\001\002\000\020\004\015\012\uffda\035\014\041" +
    "\013\043\121\045\005\046\020\001\002\000\014\004\015" +
    "\035\014\041\013\045\005\046\020\001\002\000\016\004" +
    "\015\035\014\041\013\044\123\045\005\046\020\001\002" +
    "\000\004\012\uffdb\001\002\000\020\006\037\007\035\013" +
    "\054\033\034\034\027\035\014\036\042\001\002\000\014" +
    "\012\uffdd\017\057\020\056\021\062\022\060\001\002\000" +
    "\004\002\000\001\002\000\026\002\ufffb\004\ufffb\012\ufffb" +
    "\016\ufffb\035\ufffb\041\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\001\002\000\026\002\ufff9\004\ufff9\012\ufff9\016\ufff9" +
    "\035\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\001" +
    "\002\000\024\006\037\007\035\013\032\033\034\034\027" +
    "\035\014\036\042\037\030\040\041\001\002\000\010\014" +
    "\133\031\045\032\046\001\002\000\004\015\134\001\002" +
    "\000\014\004\015\035\014\041\013\045\005\046\020\001" +
    "\002\000\016\004\015\016\136\035\014\041\013\045\005" +
    "\046\020\001\002\000\004\012\uffd9\001\002\000\026\002" +
    "\ufffa\004\ufffa\012\ufffa\016\ufffa\035\ufffa\041\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\022\002\007\004\011\005\016\010\010\013" +
    "\006\015\003\016\005\017\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\022\010\010" +
    "\013\006\015\003\016\005\017\015\001\001\000\016\006" +
    "\030\007\115\010\032\011\042\012\037\014\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\021\005\016" +
    "\010\010\013\006\015\003\016\005\017\015\001\001\000" +
    "\016\005\022\010\010\013\006\015\003\016\005\017\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\030\007\043\010\032\011\042\012\037" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\075\007\076\010\032\011\042" +
    "\012\037\014\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\070\006\067\010\032\011\042\012\037" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\030\007\050\010" +
    "\032\011\042\012\037\014\035\001\001\000\016\006\030" +
    "\007\047\010\032\011\042\012\037\014\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\052\010\032\011\042\012\037\014\035\001\001\000" +
    "\002\001\001\000\014\006\054\010\032\011\042\012\037" +
    "\014\035\001\001\000\002\001\001\000\014\006\065\010" +
    "\032\011\042\012\037\014\035\001\001\000\014\006\064" +
    "\010\032\011\042\012\037\014\035\001\001\000\014\006" +
    "\063\010\032\011\042\012\037\014\035\001\001\000\002" +
    "\001\001\000\014\006\062\010\032\011\042\012\037\014" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\074" +
    "\010\032\011\042\012\037\014\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\111\010\032\011\042\012" +
    "\037\014\035\001\001\000\014\006\110\010\032\011\042" +
    "\012\037\014\035\001\001\000\014\006\107\010\032\011" +
    "\042\012\037\014\035\001\001\000\014\006\106\010\032" +
    "\011\042\012\037\014\035\001\001\000\014\006\105\010" +
    "\032\011\042\012\037\014\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\114\010\032" +
    "\011\042\012\037\014\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\117\005\016\010\010\013\006" +
    "\015\003\016\005\017\015\001\001\000\016\005\022\010" +
    "\010\013\006\015\003\016\005\017\015\001\001\000\020" +
    "\004\121\005\016\010\010\013\006\015\003\016\005\017" +
    "\015\001\001\000\016\005\022\010\010\013\006\015\003" +
    "\016\005\017\015\001\001\000\002\001\001\000\014\006" +
    "\124\010\032\011\042\012\037\014\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\030\007\131\010\032\011\042\012\037" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\134\005\016\010\010\013\006\015\003\016\005" +
    "\017\015\001\001\000\016\005\022\010\010\013\006\015" +
    "\003\016\005\017\015\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EcoModelParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EcoModelParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EcoModelParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EcoModelParser$actions {
  private final EcoModelParser parser;

  /** Constructor */
  CUP$EcoModelParser$actions(EcoModelParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EcoModelParser$do_action(
    int                        CUP$EcoModelParser$act_num,
    java_cup.runtime.lr_parser CUP$EcoModelParser$parser,
    java.util.Stack            CUP$EcoModelParser$stack,
    int                        CUP$EcoModelParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EcoModelParser$result;

      /* select the action based on the action number */
      switch (CUP$EcoModelParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // postwhile ::= DO LEFTCB opelist RIGHTCB WHILE LPAR boolexp RPAR 
            {
              Tpostwhile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tpostwhile(b, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("postwhile",13, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-7)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // prewhile ::= WHILE LPAR boolexp RPAR LEFTCB opelist RIGHTCB 
            {
              Tprewhile RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tprewhile(b, l);  
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("prewhile",12, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-6)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= IF boolexp THEN opelist 
            {
              Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Topelist t = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tifthenelse(b,t); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF boolexp THEN opelist ELSE opelist ENDIF 
            {
              Tifthenelse RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).right;
		Tboolexp b = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).right;
		Topelist t = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist e = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tifthenelse(b,t,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-6)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // let ::= CON LET exp 
            {
              Tlet RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tlet(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // let ::= ident LET exp 
            {
              Tlet RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tlet(i,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("let",9, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // string ::= STRINGLITERAL 
            {
              Tstring RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tstring(s); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("string",10, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // index ::= INDEX 
            {
              Tindex RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tindex(z); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("index",8, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= VALUE 
            {
              Tvalue RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tvalue(z); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ident ::= ID 
            {
              Tident RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tident(n); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ident",6, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolexp ::= LPAR boolexp RPAR 
            {
              Tboolexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tboolexp e = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolexp ::= boolexp OR boolexp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp l = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tboolexp r = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'|',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolexp ::= boolexp AND boolexp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Tboolexp l = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tboolexp r = (Tboolexp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'&',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolexp ::= exp GEQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'$',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexp ::= exp GE exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'>',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexp ::= exp LEQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'!',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexp ::= exp LE exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'<',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexp ::= exp EQ exp 
            {
              Tboolexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tboolexp(l,'=',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexp ::= FALSE 
            {
              Tboolexp RESULT =null;
		 RESULT = new Tboolexp(false); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexp ::= TRUE 
            {
              Tboolexp RESULT =null;
		 RESULT = new Tboolexp(true); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("boolexp",5, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= SIGMA LPAR exp RPAR 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tsigma(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-3)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp MINUS exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'-',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp DIV exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'/',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp TIMES exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'*',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp PLUS exp 
            {
              Texp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texpinfix(l,'+',r); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= LEFTB RIGHTB 
            {
              Texp RESULT =null;
		 RESULT = new Texplist(); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= LEFTB explist RIGHTB 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texplist e = (Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= LPAR exp RPAR 
            {
              Texp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = e; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= string 
            {
              Texp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tstring s = (Tstring)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = s; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= ident 
            {
              Texp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = i; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= index 
            {
              Texp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tindex i = (Tindex)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = i; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= value 
            {
              Texp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tvalue n = (Tvalue)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = n; 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ope ::= postwhile SEMICOLON 
            {
              Tope RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tpostwhile w = (Tpostwhile)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(w); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ope ::= prewhile SEMICOLON 
            {
              Tope RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tprewhile w = (Tprewhile)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(w); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ope ::= if SEMICOLON 
            {
              Tope RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tifthenelse i = (Tifthenelse)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(i); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ope ::= let SEMICOLON 
            {
              Tope RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tlet l = (Tlet)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		 RESULT = new Tope(l); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("ope",3, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opelist ::= opelist ope 
            {
              Topelist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Topelist l = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tope o = (Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Topelist(l,o); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opelist ::= ope 
            {
              Topelist RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Tope o = (Tope)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Topelist(o);
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("opelist",2, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // explist ::= explist COMMA exp 
            {
              Texplist RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).right;
		Texplist l = (Texplist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texplist(l,e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-2)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // explist ::= exp 
            {
              Texplist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Texplist(e); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("explist",1, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).right;
		Tprogram start_val = (Tprogram)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)).value;
		RESULT = start_val;
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.elementAt(CUP$EcoModelParser$top-1)), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EcoModelParser$parser.done_parsing();
          return CUP$EcoModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= opelist 
            {
              Tprogram RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()).right;
		Topelist ol = (Topelist)((java_cup.runtime.Symbol) CUP$EcoModelParser$stack.peek()).value;
		 RESULT = new Tprogram(ol); 
              CUP$EcoModelParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EcoModelParser$stack.peek()), RESULT);
            }
          return CUP$EcoModelParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

